 # Copyright (c) 2013 EVO Payments International - All Rights Reserved.
 #
 # This software and documentation is subject to and made
 # available only pursuant to the terms of an executed license
 # agreement, and may be used only in accordance with the terms
 # of said agreement. This software may not, in whole or in part,
 # be copied, photocopied, reproduced, translated, or reduced to
 # any electronic medium or machine-readable form without
 # prior consent, in writing, from EVO Payments International
 #
 # Use, duplication or disclosure by the U.S. Government is subject
 # to restrictions set forth in an executed license agreement
 # and in subparagraph (c)(1) of the Commercial Computer
 # Software-Restricted Rights Clause at FAR 52.227-19; subparagraph
 # (c)(1)(ii) of the Rights in Technical Data and Computer Software
 # clause at DFARS 252.227-7013, subparagraph (d) of the Commercial
 # Computer Software--Licensing clause at NASA FAR supplement
 # 16-52.227-86; or their equivalent.
 #
 # Information in this software is subject to change without notice
 # and does not represent a commitment on the part of EVO Payments International.
 #
 # Sample Code is for reference Only and is intended to be used for educational purposes. It"s the responsibility of
 # the software company to properly integrate into thier solution code that best meets thier production needs.
 #
 
module Workflows
	def self.TerminalCapture(client)
	
client.do_log=true;


# Get service information to see the avilable functions.

service_response = EvoCWS_endpoint_svcinfo.get_service_info(client);
p( service_response.data );
test_assert(service_response.data["Success"]==true, client);

pindebit_auth_template= {
	"Transaction" => {
		"TenderData" => {
			"CardData" => {
				"CardType" => Evo::TypeCardType::MasterCard,
				"CardholderName" => nil,
				"PAN" => "5454545454545454",
				"Expire" => "1215",
				"Track2Data" => "5454545454545454=15121010134988000010",
			},
			"CardSecurityData" => {
				"KeySerialNumber" => "12345678",
				"PIN" => "1234"
			},
		},
		"TransactionData" => {
			"AccountType"=> Evo::AccountType::CheckingAccount,
			"EntryMode" => Evo::EntryMode::Keyed,
		}
	}
};

if (service_response.data["BankcardServices"].length != 0) then

	service_response.data["BankcardServices"].each { |service|
	
		if (service["ServiceId"] != client.workflow_id) then next; end
		#if (service["ServiceId"] != "4CACF00001") then next; end
	
		#client.workflow_id = service["ServiceId"];
		
		profiles_response = EvoCWS_endpoint_merchinfo.get_merchant_profiles(client, "");
		p( profiles_response.data );
		test_assert(profiles_response.data["Success"]==true, client);
		if (profiles_response.data["Results"].length<= 0 ) 
			p ("\n\nFAILED: Need a merchant profile for the service id: ".client.workflow_id);
			next;
		end
		# Skip the service if there aren't any merchant profiles defined.
		
		# We only need to test one merchant profile.
		profiles_response.data["Results"].each { |the_merchant_profile|
			client.merchant_profile_id = the_merchant_profile["id"];
			if (client.merchant_profile_id[0..7] != "Default") then break; end
			# Avoid selecting a "Default" profile, generated by SaveMerchant profile in the basic testing.
			# Fallthrough is okay. It selects the most recently created profile.
		}
		
		profile= EvoCWS_endpoint_merchinfo.is_merchant_profile_initialized(client, "");
		p( profile.data );
		test_assert(profile.data["Success"]==true, client);
		
		####################
		
			authorized_response = EvoCWS_endpoint_txn.authorize(client, {});
		
			p( authorized_response.data );
			test_assert(authorized_response.data["Success"]==true, client);
			test_assert(authorized_response.data["Status"]!="Failure", client);
	
			captured_response = EvoCWS_endpoint_txn.capture_selective(client, {
				"TransactionIds"=>[
					authorized_response.data["TransactionId"]
				],
				"DifferenceData"=>[{
						"$type" => "BankcardCapture,http://schemas.evosnap.com/CWS/v2.0/Transactions/Bankcard",
						"Amount"=>"10.00",
						"TransactionId"=>authorized_response.data["TransactionId"]
				}]
			});
		   
			p(captured_response.data);
			test_assert(captured_response.data["Success"]==true, client);
			test_assert(captured_response.data["Status"]!="Failure", client);
			
			returned_response = EvoCWS_endpoint_txn.return_by_id(client, {
				"DifferenceData" => {
					"TransactionId" => authorized_response.data["TransactionId"]
				}
			});
			
			p(returned_response.data);
			test_assert(returned_response.data["Success"]==true, client);
			test_assert(returned_response.data["Status"]!="Failure", client);
	
			captured_return_response = EvoCWS_endpoint_txn.capture_selective(client, {
				"TransactionIds"=>[
					returned_response.data["TransactionId"]
				],
				"DifferenceData"=>[{
						"$type" => "BankcardCapture,http://schemas.evosnap.com/CWS/v2.0/Transactions/Bankcard",
						"Amount"=>"10.00",
						"TransactionId"=>returned_response.data["TransactionId"]
					
				}]
			});
		   
			p(captured_return_response.data);
			test_assert(captured_return_response.data["Success"]==true, client);
			test_assert(captured_return_response.data["Status"]!="Failure", client);
		
		########################
		
			authorized_response = EvoCWS_endpoint_txn.authorize(client, {});
			
			p( authorized_response.data );
			test_assert(authorized_response.data["Success"]==true, client);
			test_assert(authorized_response.data["Status"]!="Failure", client);
		
			undo_response = EvoCWS_endpoint_txn.undo(client, {
				"DifferenceData" => {
					"TransactionId" => authorized_response.data["TransactionId"]
				}
			});
					
			p( undo_response.data );
			test_assert(undo_response.data["Success"]==true, client);
			test_assert(undo_response.data["Status"]!="Failure", client);
		
		########################
			response = EvoCWS_endpoint_txn.return_unlinked(client, {});
			test_assert(undo_response.data["Success"]==true, client);
			test_assert(undo_response.data["Status"]!="Failure", client);
		
		########################
		
			authorized_response = EvoCWS_endpoint_txn.authorize(client, {});
			
			p( authorized_response.data );
			test_assert(authorized_response.data["Success"]==true, client);
			test_assert(authorized_response.data["Status"]!="Failure", client);
		
			response = EvoCWS_endpoint_txn.capture_all(client, {});
			p( response.data );
			test_assert(authorized_response.data["Success"]==true, client);
			test_assert(authorized_response.data["Status"]!="Failure", client);
	}
end

	end
end


