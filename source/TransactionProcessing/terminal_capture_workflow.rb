# This software and documentation is subject to and made
# available only pursuant to the terms of an executed license
# agreement, and may be used only in accordance with the terms
# of said agreement. This software may not, in whole or in part,
# be copied, photocopied, reproduced, translated, or reduced to
# any electronic medium or machine-readable form without
# prior consent, in writing, from EVO Payments International, INC.
#
# Use, duplication or disclosure by the U.S. Government is subject
# to restrictions set forth in an executed license agreement
# and in subparagraph (c)(1) of the Commercial Computer
# Software-Restricted Rights Clause at FAR 52.227-19; subparagraph
# (c)(1)(ii) of the Rights in Technical Data and Computer Software
# clause at DFARS 252.227-7013, subparagraph (d) of the Commercial
# Computer Software--Licensing clause at NASA FAR supplement
# 16-52.227-86; or their equivalent.
#
# Information in this software is subject to change without notice
# and does not represent a commitment on the part of EVO Payments International.
#
# Sample Code is for reference Only and is intended to be used for educational
# purposes. It's the responsibility of the software company to properly
# integrate into thier solution code that best meets thier production needs.
#
# Copyright:: 2017 EVO Payments International - All Rights Reserved
# License:: Proprietary

# The Workflows module contains the three "workflows" run in this sample
# application;  each lays out the typical workflows of a Snap* application.
#
# This workflow shows how to handle transactions captured an external terminal,
# as opposed to transactions captured directly by your application.
module Workflows
  def self.terminal_capture(client) # rubocop:disable Metrics/MethodLength
    # Get service information to see the avilable functions.

    service_response = EvoCWS_endpoint_svcinfo.get_service_info(client)
    test_assert(service_response.data['Success'] == true, client)

    return if service_response.data['BankcardServices'].empty?

    service_response.data['BankcardServices'].each do |service| # rubocop:disable Metrics/BlockLength
      next if service['ServiceId'] != client.workflow_id
      # if (service["ServiceId"] != "4CACF00001") then next; end

      # client.workflow_id = service["ServiceId"];

      profiles_response =
        EvoCWS_endpoint_merchinfo.get_merchant_profiles(client, '')
      test_assert(profiles_response.data['Success'] == true, client)
      if profiles_response.data['Results'].length <= 0
        p "\n\nFAILED: Need a merchant profile for the service id: "\
          + client.workflow_id
        # Skip the service if there aren't any merchant profiles defined.
        next
      end

      # We only need to test one merchant profile.
      profiles_response.data['Results'].each do |the_merchant_profile|
        client.merchant_profile_id = the_merchant_profile['id']
        break if client.merchant_profile_id[0..7] != 'Default'
        # Avoid selecting a "Default" profile, generated by SaveMerchant profile
        # in the basic testing.  Fallthrough is okay. It selects the most
        # recently created profile.
      end

      profile =
        EvoCWS_endpoint_merchinfo.merchant_profile_initialized?(client, '')
      test_assert(profile.data['Success'] == true, client)

      ####################

      # AUTHORIZE:  Create an authorization for a payment for later capture:
      authorized_response = EvoCWS_endpoint_txn.authorize(client, {})
      test_assert(authorized_response.data['Success'] == true, client)
      test_assert(authorized_response.data['Status'] != 'Failure', client)

      # CAPTURE:  Capture a previously authorized payment:
      captured_response = EvoCWS_endpoint_txn.capture_selective(
        client,
        'TransactionIds' => [
          authorized_response.data['TransactionId']
        ],
        'DifferenceData' => [{
          '$type' => 'BankcardCapture,http://schemas.evosnap.com/CWS/v2.0/Transactions/Bankcard',
          'Amount' => '10.00',
          'TransactionId' => authorized_response.data['TransactionId']
        }]
      )
      test_assert(captured_response.data['Success'] == true, client)
      test_assert(captured_response.data['Status'] != 'Failure', client)

      # RETURN BY ID:  Make a refund of an authorized and captured transaction:
      returned_response = EvoCWS_endpoint_txn.return_by_id(
        client,
        'DifferenceData' => {
          'TransactionId' => authorized_response.data['TransactionId']
        }
      )
      test_assert(returned_response.data['Success'] == true, client)
      test_assert(returned_response.data['Status'] != 'Failure', client)

      # CAPTURE:  Capture a previously authorized payment:
      captured_return_response = EvoCWS_endpoint_txn.capture_selective(
        client,
        'TransactionIds' => [
          returned_response.data['TransactionId']
        ],
        'DifferenceData' => [{
          '$type' => 'BankcardCapture,'\
            + 'http://schemas.evosnap.com/CWS/v2.0/Transactions/Bankcard',
          'TransactionId' => returned_response.data['TransactionId']
        }]
      )
      test_assert(captured_return_response.data['Success'] == true, client)
      test_assert(captured_return_response.data['Status'] != 'Failure', client)

      ########################

      # AUTHORIZE:  Create an authorization for a payment for later capture:
      authorized_response = EvoCWS_endpoint_txn.authorize(client, {})
      test_assert(authorized_response.data['Success'] == true, client)
      test_assert(authorized_response.data['Status'] != 'Failure', client)

      # UNDO:  Revoke an authorization that has not be captured yet:
      undo_response = EvoCWS_endpoint_txn.undo(
        client,
        'DifferenceData' => {
          'TransactionId' => authorized_response.data['TransactionId']
        }
      )
      test_assert(undo_response.data['Success'] == true, client)
      test_assert(undo_response.data['Status'] != 'Failure', client)

      # RETURN UNLIKED: Provide funds without linking to a previous transaction:
      response = EvoCWS_endpoint_txn.return_unlinked(client, {})
      test_assert(response.data['Success'] == true, client)
      test_assert(response.data['Status'] != 'Failure', client)

      ########################

      # AUTHORIZE:  Create an authorization for a payment for later capture:
      authorized_response = EvoCWS_endpoint_txn.authorize(client, {})
      test_assert(authorized_response.data['Success'] == true, client)
      test_assert(authorized_response.data['Status'] != 'Failure', client)

      # CAPTURE ALL:  Capture all outstanding authorizations:
      response = EvoCWS_endpoint_txn.capture_all(client, {})
      test_assert(response.data['Success'] == true, client)
      test_assert(response.data['Status'] != 'Failure', client)
    end
  end
end
